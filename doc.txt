Client:

Outbound traffic:

app->tun0->quicktun->encrypt->remote  

Inbound traffic

udp listen->decrypt->tun0->app

Must specify the Remote Address
--------------------------------------------

Server:

Outbound traffic:

tun0->quicktun->encrypt->remote

Inbound traffic:

udp listen->decrypt->tun0->NAT->IP Forward

---------------------------------------
The logic is same in server and client.

SECRET: 717569636b74756e2e6b657970616972203c202f6465762f7572616e646f6d0a
PUBLIC: c7cd6f724c9966d017fd6397d35e17f2efc1a22ec08b5bb88f7b1140b472bb27

sudo ./out/quicktun -c INTERFACE tun0 -c PROTOCOL nacltai -c TUN_MODE 1 -c PRIVATE_KEY_FILE  ~/QuickTun/secret.key -c PUBLIC_KEY c7cd6f724c9966d017fd6397d35e17f2efc1a22ec08b5bb88f7b1140b472bb27 -c USE_PI=1

sudo ./out/quicktun -c INTERFACE tun0  -c PROTOCOL nacltai -c TUN_MODE 1 -c REMOTE_ADDRESS 10.32.193.94 -c  REMOTE_PORT 2998 -c PRIVATE_KEY_FILE  ~/QuickTun/secret.key -c PUBLIC_KEY c7cd6f724c9966d017fd6397d35e17f2efc1a22ec08b5bb88f7b1140b472bb27 -c USE_PI=1

netstat -tulpn | grep :2998

 sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -s 10.0.0.0/8 -o eth0 -j MASQUERADE
sudo iptables -A FORWARD -p tcp --syn -s 10.0.0.0/8 -j TCPMSS --set-mss 1356

sudo ip route add 10.32.193.94 via $(ip route show 0/0 | sed -e 's/.* via \([^ ]*\).*/\1/')
ip route add   0/1 dev tun
ip route add 128/1 dev tun


lsof -wni tcp:3000
